--QUESTION 1: This query retrieves information about courses and their associated programs by joining the Course 
--and Program tables based on the programID column. 

SELECT 
    C.courseID,
    C.courseName,
    C.courseDescription,
    C.hasLabs,
    C.hasTutorial,
    P.programID,
    P.programName
FROM 
    Course C
INNER JOIN 
    Program P ON C.programID = P.programID;


--QUESTION 2
--The LEFT JOIN fetches information from the Course, Program, and Department tables. 
--It returns all records from the left table (Course), and the matched records from the right tables (Program and Department)
SELECT 
    C.courseID,
    C.courseName,
    C.courseDescription,
    C.hasLabs,
    C.hasTutorial,
    P.programID,
    P.programName,
    D.deptID,
    D.deptName
FROM 
    Course C
LEFT JOIN 
    Program P ON C.programID = P.programID
LEFT JOIN 
    Department D ON P.deptID = D.deptID;

--QUESTION 3 
--This creates a view for the query from question 1, which joins the Course, Program, and Department tables.
--This view will allow me to access the information about courses, their associated programs, and the departments 
--offering those programs in a simplified manner.

CREATE VIEW CourseProgramDepartmentView AS
SELECT 
    C.courseID,
    C.courseName,
    C.courseDescription,
    C.hasLabs,
    C.hasTutorial,
    P.programID,
    P.programName,
    D.deptID,
    D.deptName
FROM 
    Course C
INNER JOIN 
    Program P ON C.programID = P.programID
INNER JOIN 
    Department D ON P.deptID = D.deptID;

-- To use the view I query it like a table:
SELECT * FROM CourseProgramDepartmentView;


--QUESTION 4
DELIMITER //

CREATE PROCEDURE CheckDataValidity()
BEGIN
    DECLARE course_count INT;
    DECLARE program_count INT;
    DECLARE department_count INT;
    
    -- Count the number of courses without associated programs
    SELECT COUNT(*) INTO course_count
    FROM Course
    WHERE programID IS NULL;

    -- Count the number of programs without associated departments
    SELECT COUNT(*) INTO program_count
    FROM Program
    WHERE deptID IS NULL;

    -- Count the number of departments without associated programs
    SELECT COUNT(*) INTO department_count
    FROM Department
    WHERE deptID NOT IN (SELECT deptID FROM Program);

    -- Output the results
    SELECT course_count AS CoursesWithoutPrograms,
           program_count AS ProgramsWithoutDepartments,
           department_count AS DepartmentsWithoutPrograms;
END //

DELIMITER ;

--This stored procedure checks for three conditions:

Count of courses without associated programs.
Count of programs without associated departments.
Count of departments without associated programs.

--To use the stored procedure
CALL CheckDataValidity();
--This will execute the stored procedure and display the results, indicating the counts for each condition.


--QUESTION 5
--First create a table to store user log changes.
CREATE TABLE UserLog (
    LogID INT PRIMARY KEY AUTO_INCREMENT,
    UserID INT,
    OldUsername VARCHAR(255),
    NewUsername VARCHAR(255),
    Action VARCHAR(50),
    ChangeDateTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

--Then, we create the trigger and table to track changes in the first name of students.
DELIMITER //
CREATE TRIGGER LogUsernameChanges
AFTER UPDATE ON Student
FOR EACH ROW
BEGIN
    IF OLD.firstName <> NEW.firstName OR OLD.lastName <> NEW.lastName THEN
        INSERT INTO UserLog (UserID, OldUsername, NewUsername, Action)
        VALUES (NEW.studentID, CONCAT(OLD.firstName, ' ', OLD.lastName), CONCAT(NEW.firstName, ' ', NEW.lastName), 'Update');
    END IF;
END //
DELIMITER ;

--To test the trigger, we perform an update on a student's first name
UPDATE Student
SET lastName = 'Ifeoluwa'
WHERE StudentID = 33;

--We check to see if the change has been logged.
SELECT * FROM Student;

--We check the log table
SELECT * FROM UserLog;

--Question 6
SELECT 
    c.courseName,
    AVG(
        CASE
            WHEN rc.finalGrade = 'A' THEN 4.0
            WHEN rc.finalGrade = 'A-' THEN 3.7
            WHEN rc.finalGrade = 'B+' THEN 3.3
            WHEN rc.finalGrade = 'B' THEN 3.0
            WHEN rc.finalGrade = 'B-' THEN 2.7
            WHEN rc.finalGrade = 'C+' THEN 2.3
            WHEN rc.finalGrade = 'C' THEN 2.0
            WHEN rc.finalGrade = 'C-' THEN 1.7
            WHEN rc.finalGrade = 'D+' THEN 1.3
            WHEN rc.finalGrade = 'D' THEN 1.0
            ELSE 0.0
        END
    ) AS average_grade
FROM 
    Course c
INNER JOIN 
    CourseOffering co ON c.courseID = co.courseID
INNER JOIN 
    RegisteredCourses rc ON co.courseOfferingID = rc.courseOfferingID
GROUP BY 
    c.courseName;

--This query calculates the average final grade for each course based on the grades recorded in the "RegisteredCourses" table. 



